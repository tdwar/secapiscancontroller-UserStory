@AuraEnabled
public static String SCAScan(String copadoUserStoryId) {
    String statusURLSCA = '';
    String appReqId = '';
    String respSCA = '';
    String excludeFiles = '';
    String excludeFolders = '';
    
    List<copado__User_Story__c> toUpdateUserStories = new List<copado__User_Story__c>();
    List<SEC_API_Scan_Result__c> secResList = getScanResultRecord(copadoUserStoryId);
    system.debug('VXD3378 INSIDE SCASCAN ');
    SEC_API_Scan_Result__c sr = secResList[0];
    String userStoryId = copadoUserStoryId;

    // Permission checks for copado__User_Story__c fields
    if (!Schema.sObjectType.copado__User_Story__c.isAccessible() ||
        !Schema.sObjectType.copado__User_Story__c.fields.Name.isAccessible() ||
        !Schema.sObjectType.copado__User_Story__c.fields.copado__Project__c.isAccessible()) {
        throw new AuraHandledException('User does not have permission to access copado__User_Story__c fields.');
    }

    // Permission checks for copado__Project__c fields
    if (!Schema.sObjectType.copado__Project__c.fields.SecAPI_Orphan_App_Id__c.isAccessible() ||
        !Schema.sObjectType.copado__Project__c.fields.Exclude_Files__c.isAccessible() ||
        !Schema.sObjectType.copado__Project__c.fields.Exclude_Folders__c.isAccessible()) {
        throw new AuraHandledException('User does not have permission to access copado__Project__c fields.');
    }

    List<copado__User_Story__c> lstUserStory = [SELECT Id, Name, copado__Project__c, copado__Project__r.SecAPI_Orphan_App_Id__c, copado__Has_Apex_Code__c, copado__Project__r.Exclude_Files__c, copado__Project__r.Exclude_Folders__c FROM copado__User_Story__c WHERE Id = :copadoUserStoryId];
    
    String appId = lstUserStory[0].copado__Project__r.SecAPI_Orphan_App_Id__c;
    String userStoryNumber = lstUserStory[0].Name;
    String reqBody = '';
    HTTPResponse resSCA = new HTTPResponse();
    String endURL = '/start/' + appId;

    // Check for permission to create SEC_API_Scan_Result__c records
    if (!Schema.sObjectType.SEC_API_Scan_Result__c.isCreateable()) {
        throw new AuraHandledException('User does not have permission to create SEC_API_Scan_Result__c records');
    }

    // Check for permission to update copado__User_Story__c records
    if (!Schema.sObjectType.copado__User_Story__c.isUpdateable()) {
        throw new AuraHandledException('User does not have permission to update copado__User_Story__c records');
    }
    
    try {
        excludeFiles = lstUserStory[0].copado__Project__r.Exclude_Files__c;
        excludeFolders = lstUserStory[0].copado__Project__r.Exclude_Folders__c;
        
        reqBody = '{"repoBranchToScan": "refs/heads/orphan/feature-' + userStoryNumber + '","incremental": true,"force": false,"excludeFoldersPattern": "' + excludeFolders + '","excludeFilesPattern": "' + excludeFiles + '"}';
        system.debug('reqBody for SCA scan : ' + reqBody);
        resSCA = getCalloutResponseSCA(endURL, 'POST', reqBody);
        system.debug('@@@' + resSCA);
        
        if (resSCA != null && resSCA.getStatusCode() == 202) {
            // Parse JSON response to get the statusUrl field values.
            JSONParser parser = JSON.createParser(resSCA.getBody());
            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) &&
                    (parser.getText() == 'statusUrl')) {
                    parser.nextToken();
                    // Get the value.
                    statusURLSCA = parser.getText();
                }
            }
            if (!String.isEmpty(statusURLSCA)) {
                appReqId = statusURLSCA.substringAfter('status/');
                if (appReqId.length() > 0 && appReqId.contains('/')) {
                    toUpdateUserStories.add(new copado__User_Story__c(Id = userStoryId, SCA_Scan_Status__c = 'In-Progress', SCA_Scan_Id__c = appReqId.split('/')[1]));
                }
            } else {
                toUpdateUserStories.add(new copado__User_Story__c(Id = userStoryId, SCA_Scan_Status__c = 'In-Progress'));
            }
            
            sr.SCA_Status_URL__c = appReqId;
            sr.SCA_scan_Status__c = 'Callout 1 Completed';
            sr.SCA_Scan_Id__c = appReqId.split('/')[1];
            respSCA = appReqId;
        } else {
            sr.SCA_scan_Status__c = 'Callout 1 Failed';
            sr.SCA_Error_Message__c = 'Status Code ' + resSCA.getStatusCode() + ', Error Message ' + resSCA.getBody();
            toUpdateUserStories.add(new copado__User_Story__c(Id = userStoryId, SCA_Scan_Status__c = 'Completed'));
            respSCA = 'Error occurred during 1st Callout. Response Status Code : ' + resSCA.getStatusCode() + ', Response Status : ' + resSCA.getStatus() + ', Response Message : ' + resSCA.getBody();
        }

        // Ensure user has permission to update copado__User_Story__c records and fields
        if (!toUpdateUserStories.isEmpty()) {
            if (Schema.sObjectType.copado__User_Story__c.isUpdateable() && Schema.sObjectType.copado__User_Story__c.fields.SCA_Scan_Status__c.isUpdateable()) {
                update toUpdateUserStories;
            } else {
                throw new AuraHandledException('User does not have permission to update copado__User_Story__c records or SCA_Scan_Status__c field.');
            }
        }

        // Ensure user has permission to update SEC_API_Scan_Result__c records
        if (!secResList.isEmpty()) {
            if (Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Scan_Id__c.isUpdateable()) {
                update secResList;
            } else {
                throw new AuraHandledException('User does not have permission to update SEC_API_Scan_Result__c records or SCA_Scan_Id__c field.');
            }
        }

        // Ensure user has permission to update copado__User_Story__c record
        if (Schema.sObjectType.copado__User_Story__c.isUpdateable()) {
            update lstUserStory[0];
        }

    } catch (Exception e) {
        system.debug('tejaswi 2 exception ' + e + e.getCause() + e.getLineNumber() + e.getMessage());
        throw new AuraHandledException('Error occurred during 1st Callout. Exception Cause : ' + e.getCause() + ' at Line No. ' + e.getLineNumber() + ' Error Message : ' + e.getMessage());
    }

    return respSCA;
}
