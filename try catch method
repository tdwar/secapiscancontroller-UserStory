@isTest static void testGetSECAPIScoreCard(){
        copado__Project__c pro = [SELECT Id,app_Id__c FROM copado__Project__c WHERE Name='MY JIRA Project' LIMIT 1];
        copado__User_Story__c usItem = [SELECT Id, copado__status__c,SEC_API_Scan_Status__c, copado__Project__c,copado__Project__r.Project_External_Id__c,copado__Project__r.Workspace_Id__c,copado__Project__r.Copado_Integration_Setting__r.Named_Credential__c FROM copado__User_Story__c WHERE copado__project__r.Name = 'MY JIRA Project' LIMIT 1];
        Sec_Api_Scan_Result__c srItem = [SELECT Id, copado_user_story__c FROM Sec_Api_Scan_Result__c LIMIT 1];
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"medium":"0","high":"0","low":"0","critical":"1","scanType":"0","failScan":false}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        Test.startTest();
        try {
            SecAPIScanController.getSECAPIScoreCard('test',usItem.Id);
            copado__User_Story__c updatedUserStory = [SELECT Id,SEC_API_Scan_Status__c FROM copado__User_Story__c WHERE Id =:usItem.Id];
            System.debug('tejaswi updated SEC_API_Scan_Status__c:' + updatedUserStory.SEC_API_Scan_Status__c );
            //System.assertEquals('Completed',[SELECT Id,SEC_API_Scan_Status__c FROM copado__User_Story__c WHERE Id =:usItem.Id].sec_api_scan_status__c);
            System.assertEquals('Completed',updatedUserStory.SEC_API_Scan_Status__c);
        } catch (AuraHandledException e) {
           Assert.isNotNull(e);
        }
        Test.stopTest();
    }
